from pathlib import Path
from django.contrib.gis.utils import LayerMapping
from . import models


# Auto-generated `LayerMapping` dictionary for AdminArea model
adminarea_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'admin_leve': 'admin_leve',
    'right_coun': 'right_coun',
    'left_count': 'left_count',
    'name_fr': 'name_fr',
    'maritime': 'maritime',
    'note_sourc': 'note_sourc',
    'wdb_source': 'wdb_source',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'boundary': 'boundary',
    'border_typ': 'border_typ',
    'geom': 'MULTILINESTRING',
}
adminarea_shp = Path(__file__).resolve().parent / 'shape' / 'admin_level.shp'
def admin_level_data(verbose=True):
    lm = LayerMapping(models.AdminArea, adminarea_shp, adminarea_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)

# Auto-generated `LayerMapping` dictionary for Boundary model
boundary_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'boundary': 'boundary',
    'wall': 'wall',
    'height': 'height',
    'barrier': 'barrier',
    'right_coun': 'right_coun',
    'left_count': 'left_count',
    'name_fr': 'name_fr',
    'maritime': 'maritime',
    'note_sourc': 'note_sourc',
    'wdb_source': 'wdb_source',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'border_typ': 'border_typ',
    'admin_leve': 'admin_leve',
    'geom': 'MULTILINESTRING',
}
boundary_shp = Path(__file__).resolve().parent / 'shape' / 'boundary.shp'
def boundary_data(verbose=True):
    lm = LayerMapping(models.Boundary, boundary_shp, boundary_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Street model
street_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'addr_stree': 'addr_stree',
    'image': 'image',
    'name_sl': 'name_sl',
    'name_et': 'name_et',
    'name_lt': 'name_lt',
    'name_lv': 'name_lv',
    'diet_pesce': 'diet_pesce',
    'diet_lacto': 'diet_lacto',
    'diet_glute': 'diet_glute',
    'payment_te': 'payment_te',
    'payment_ma': 'payment_ma',
    'payment_am': 'payment_am',
    'diet_vegan': 'diet_vegan',
    'diet_organ': 'diet_organ',
    'diet_meat': 'diet_meat',
    'diet_koshe': 'diet_koshe',
    'diet_halal': 'diet_halal',
    'fee': 'fee',
    'name_ro': 'name_ro',
    'bar': 'bar',
    'addr_neigh': 'addr_neigh',
    'reservatio': 'reservatio',
    'name_mi': 'name_mi',
    'alt_name_m': 'alt_name_m',
    'alt_name_d': 'alt_name_d',
    'addr_full': 'addr_full',
    'mobile_pho': 'mobile_pho',
    'official_n': 'official_n',
    'official_1': 'official_1',
    'official_2': 'official_2',
    'official_3': 'official_3',
    'official_4': 'official_4',
    'official_5': 'official_5',
    'official_6': 'official_6',
    'official_7': 'official_7',
    'name_tr': 'name_tr',
    'name_sq': 'name_sq',
    'name_pt': 'name_pt',
    'name_pl': 'name_pl',
    'name_nl': 'name_nl',
    'name_lo': 'name_lo',
    'name_lb': 'name_lb',
    'name_el': 'name_el',
    'name_da': 'name_da',
    'name_cs': 'name_cs',
    'alt_name_n': 'alt_name_n',
    'alt_name_f': 'alt_name_f',
    'alt_name_e': 'alt_name_e',
    'dispensing': 'dispensing',
    'gate_type': 'gate_type',
    'toilets_wh': 'toilets_wh',
    'name_he': 'name_he',
    'addr_unit': 'addr_unit',
    'payment_vi': 'payment_vi',
    'payment_ca': 'payment_ca',
    'internet_a': 'internet_a',
    'brewery': 'brewery',
    'operator_t': 'operator_t',
    'healthcare': 'healthcare',
    'facebook': 'facebook',
    'clothes': 'clothes',
    'antenna': 'antenna',
    'brand_wiki': 'brand_wiki',
    'service': 'service',
    'club': 'club',
    'recycling_field': 'recycling_',
    'tower_type': 'tower_type',
    'man_made': 'man_made',
    'addr_city_field': 'addr_city_',
    'short_name': 'short_name',
    'name_pnb': 'name_pnb',
    'name_ks': 'name_ks',
    'name_azb': 'name_azb',
    'brand_pnb': 'brand_pnb',
    'brand_ks': 'brand_ks',
    'brand_azb': 'brand_azb',
    'beauty': 'beauty',
    'name_zh': 'name_zh',
    'diplomatic': 'diplomatic',
    'diplomat_1': 'diplomat_1',
    'diplomat_2': 'diplomat_2',
    'contact_yo': 'contact_yo',
    'historic': 'historic',
    'healthca_1': 'healthca_1',
    'religion': 'religion',
    'name_ko': 'name_ko',
    'name_hi': 'name_hi',
    'trade': 'trade',
    'recyclin_1': 'recyclin_1',
    'name_de': 'name_de',
    'contact_li': 'contact_li',
    'descriptio': 'descriptio',
    'landuse': 'landuse',
    'craft': 'craft',
    'payment_no': 'payment_no',
    'payment_el': 'payment_el',
    'payment_cr': 'payment_cr',
    'payment_co': 'payment_co',
    'second_han': 'second_han',
    'surface': 'surface',
    'lit': 'lit',
    'official_8': 'official_8',
    'toilets_di': 'toilets_di',
    'female': 'female',
    'access': 'access',
    'drive_thro': 'drive_thro',
    'building_l': 'building_l',
    'diet_veget': 'diet_veget',
    'informatio': 'informatio',
    'outdoor_se': 'outdoor_se',
    'addr_place': 'addr_place',
    'wheelchair': 'wheelchair',
    'entrance': 'entrance',
    'name_ru': 'name_ru',
    'name_es': 'name_es',
    'embassy': 'embassy',
    'contact_fa': 'contact_fa',
    'addr_full_field': 'addr_full_',
    'designatio': 'designatio',
    'delivery': 'delivery',
    'name_sv': 'name_sv',
    'long_name_field': 'long_name_',
    'long_name': 'long_name',
    'addr_str_1': 'addr_str_1',
    'addr_house': 'addr_house',
    'addr_hou_1': 'addr_hou_1',
    'addr_floor': 'addr_floor',
    'wheelcha_1': 'wheelcha_1',
    'tourism': 'tourism',
    'stars': 'stars',
    'rooms': 'rooms',
    'mapillary': 'mapillary',
    'internet_1': 'internet_1',
    'air_condit': 'air_condit',
    'internet_2': 'internet_2',
    'payment_1': 'payment__1',
    'payment_2': 'payment__2',
    'payment_de': 'payment_de',
    'payment_3': 'payment__3',
    'payment_4': 'payment__4',
    'opening_ho': 'opening_ho',
    'min_age': 'min_age',
    'currency_a': 'currency_A',
    'capacity': 'capacity',
    'name_it': 'name_it',
    'building': 'building',
    'wikipedia': 'wikipedia',
    'wikidata': 'wikidata',
    'level': 'level',
    'diplomat_3': 'diplomat_3',
    'addr_postc': 'addr_postc',
    'fax': 'fax',
    'email': 'email',
    'addr_distr': 'addr_distr',
    'website': 'website',
    'smoking': 'smoking',
    'atm': 'atm',
    'target': 'target',
    'office': 'office',
    'name_fr': 'name_fr',
    'language_a': 'language_a',
    'country': 'country',
    'alt_name_a': 'alt_name_a',
    'alt_name': 'alt_name',
    'addr_hou_2': 'addr_hou_2',
    'phone': 'phone',
    'takeaway': 'takeaway',
    'name_ur': 'name_ur',
    'name_pa': 'name_pa',
    'name_ja': 'name_ja',
    'name_fa': 'name_fa',
    'brand_wi_1': 'brand_wi_1',
    'brand_wi_2': 'brand_wi_2',
    'brand_ur': 'brand_ur',
    'brand_pa': 'brand_pa',
    'brand_fa': 'brand_fa',
    'brand_en': 'brand_en',
    'brand_ar': 'brand_ar',
    'brand': 'brand',
    'addr_str_2': 'addr_str_2',
    'operator': 'operator',
    'opening_1': 'opening__1',
    'contact_we': 'contact_we',
    'contact_tw': 'contact_tw',
    'contact_ph': 'contact_ph',
    'contact_in': 'contact_in',
    'contact_1': 'contact__1',
    'contact_em': 'contact_em',
    'addr_cit_1': 'addr_cit_1',
    'shop': 'shop',
    'name_ar': 'name_ar',
    'name_en': 'name_en',
    'name': 'name',
    'cuisine': 'cuisine',
    'amenity': 'amenity',
    'addr_hou_3': 'addr_hou_3',
    'addr_count': 'addr_count',
    'addr_city': 'addr_city',
    'sport': 'sport',
    'leisure': 'leisure',
    'covered': 'covered',
    'geom': 'MULTIPOINT',
}
street_shp = Path(__file__).resolve().parent / 'shape' / 'street.shp'
def street_data(verbose=True):
    lm = LayerMapping(models.Street, street_shp, street_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Amenity model
amenity_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'amenity': 'amenity',
    'diet_pesce': 'diet_pesce',
    'diet_lacto': 'diet_lacto',
    'diet_glute': 'diet_glute',
    'diet_organ': 'diet_organ',
    'diet_meat': 'diet_meat',
    'backrest': 'backrest',
    'diet_koshe': 'diet_koshe',
    'diet_halal': 'diet_halal',
    'seats': 'seats',
    'material': 'material',
    'colour': 'colour',
    'bar': 'bar',
    'addr_neigh': 'addr_neigh',
    'fuel_lpg': 'fuel_lpg',
    'fuel_octan': 'fuel_octan',
    'fuel_oct_1': 'fuel_oct_1',
    'fuel_oct_2': 'fuel_oct_2',
    'noexit': 'noexit',
    'stars': 'stars',
    'reservatio': 'reservatio',
    'lit': 'lit',
    'bin': 'bin',
    'mobile_pho': 'mobile_pho',
    'url': 'url',
    'name_uk': 'name_uk',
    'bench': 'bench',
    'shelter_ty': 'shelter_ty',
    'contact_yo': 'contact_yo',
    'toilets_ac': 'toilets_ac',
    'toilets': 'toilets',
    'vending': 'vending',
    'addr_unit': 'addr_unit',
    'crossing': 'crossing',
    'payment_vi': 'payment_vi',
    'payment_no': 'payment_no',
    'payment_de': 'payment_de',
    'payment_co': 'payment_co',
    'payment_ca': 'payment_ca',
    'min_age': 'min_age',
    'internet_a': 'internet_a',
    'brewery': 'brewery',
    'operator_t': 'operator_t',
    'healthcare': 'healthcare',
    'payment_ma': 'payment_ma',
    'payment_cr': 'payment_cr',
    'addr_stree': 'addr_stree',
    'office': 'office',
    'public_tra': 'public_tra',
    'bus': 'bus',
    'facebook': 'facebook',
    'short_name': 'short_name',
    'name_zh': 'name_zh',
    'name_pnb': 'name_pnb',
    'name_ks': 'name_ks',
    'name_azb': 'name_azb',
    'brand_pnb': 'brand_pnb',
    'brand_ks': 'brand_ks',
    'brand_azb': 'brand_azb',
    'motorcycle': 'motorcycle',
    'motorcar': 'motorcar',
    'foot': 'foot',
    'bicycle': 'bicycle',
    'toilets_wh': 'toilets_wh',
    'diet_vegan': 'diet_vegan',
    'name_ru': 'name_ru',
    'name_ko': 'name_ko',
    'phone_1': 'phone_1',
    'phone_mobi': 'phone_mobi',
    'addr_ref': 'addr_ref',
    'contact_li': 'contact_li',
    'currency_a': 'currency_A',
    'craft': 'craft',
    'services': 'services',
    'air_condit': 'air_condit',
    'opening_ho': 'opening_ho',
    'wikidata': 'wikidata',
    'public_boo': 'public_boo',
    'location': 'location',
    'name_ro': 'name_ro',
    'denominati': 'denominati',
    'payment_el': 'payment_el',
    'payment_2': 'payment__2',
    'payment_3': 'payment__3',
    'indoor': 'indoor',
    'drinking_w': 'drinking_w',
    'descriptio': 'descriptio',
    'image': 'image',
    'unisex': 'unisex',
    'male': 'male',
    'place_of_w': 'place_of_w',
    'recycling_field': 'recycling_',
    'recyclin_1': 'recyclin_1',
    'female': 'female',
    'alt_name': 'alt_name',
    'addr_place': 'addr_place',
    'toilets_po': 'toilets_po',
    'toilets_di': 'toilets_di',
    'addr_subur': 'addr_subur',
    'addr_sub_1': 'addr_sub_1',
    'addr_state': 'addr_state',
    'addr_sta_1': 'addr_sta_1',
    'addr_provi': 'addr_provi',
    'addr_pro_1': 'addr_pro_1',
    'addr_pla_1': 'addr_pla_1',
    'addr_pla_2': 'addr_pla_2',
    'addr_city_field': 'addr_city_',
    'wheelchair': 'wheelchair',
    'diet_veget': 'diet_veget',
    'layer': 'layer',
    'self_servi': 'self_servi',
    'name_de': 'name_de',
    'surface': 'surface',
    'supervised': 'supervised',
    'dispensing': 'dispensing',
    'delivery': 'delivery',
    'level': 'level',
    'natural': 'natural',
    'designatio': 'designatio',
    'internet_1': 'internet_1',
    'outdoor_se': 'outdoor_se',
    'highway': 'highway',
    'addr_postc': 'addr_postc',
    'fuel_diese': 'fuel_diese',
    'fee': 'fee',
    'wifi': 'wifi',
    'capacity': 'capacity',
    'addr_house': 'addr_house',
    'entrance': 'entrance',
    'fax': 'fax',
    'email': 'email',
    'addr_distr': 'addr_distr',
    'wheelcha_1': 'wheelcha_1',
    'ref': 'ref',
    'smoking': 'smoking',
    'parking': 'parking',
    'building': 'building',
    'is_in': 'is_in',
    'drive_thro': 'drive_thro',
    'website': 'website',
    'phone': 'phone',
    'internet_2': 'internet_2',
    'takeaway': 'takeaway',
    'name_ur': 'name_ur',
    'name_pa': 'name_pa',
    'name_ja': 'name_ja',
    'name_fa': 'name_fa',
    'brand_ur': 'brand_ur',
    'brand_pa': 'brand_pa',
    'brand_fa': 'brand_fa',
    'addr_str_1': 'addr_str_1',
    'contact_we': 'contact_we',
    'contact_tw': 'contact_tw',
    'contact_ph': 'contact_ph',
    'contact_in': 'contact_in',
    'contact_fa': 'contact_fa',
    'contact_em': 'contact_em',
    'addr_cit_1': 'addr_cit_1',
    'healthca_1': 'healthca_1',
    'emergency': 'emergency',
    'opening_1': 'opening__1',
    'dress_code': 'dress_code',
    'religion': 'religion',
    'atm': 'atm',
    'official_n': 'official_n',
    'shop': 'shop',
    'operator': 'operator',
    'brand_wiki': 'brand_wiki',
    'brand_wi_1': 'brand_wi_1',
    'brand_en': 'brand_en',
    'brand_ar': 'brand_ar',
    'brand': 'brand',
    'access': 'access',
    'addr_str_2': 'addr_str_2',
    'addr_hou_1': 'addr_hou_1',
    'addr_count': 'addr_count',
    'addr_city': 'addr_city',
    'service': 'service',
    'barrier': 'barrier',
    'cuisine': 'cuisine',
    'ele': 'ele',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'geom': 'MULTIPOINT',
}
amenity_shp = Path(__file__).resolve().parent / 'shape' / 'amenity.shp'
def amenity_data(verbose=True):
    lm = LayerMapping(models.Amenity, amenity_shp, amenity_mapping, transform=False)
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Bicycle model
bicycle_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'bicycle': 'bicycle',
    'crossing_i': 'crossing_i',
    'cycleway': 'cycleway',
    'barrier': 'barrier',
    'handrail': 'handrail',
    'footway': 'footway',
    'segregated': 'segregated',
    'wheelchair': 'wheelchair',
    'incline': 'incline',
    'service': 'service',
    'motor_vehi': 'motor_vehi',
    'bridge': 'bridge',
    'level': 'level',
    'cutting': 'cutting',
    'constructi': 'constructi',
    'tunnel': 'tunnel',
    'maxheight': 'maxheight',
    'layer': 'layer',
    'horse': 'horse',
    'ref_ar': 'ref_ar',
    'foot': 'foot',
    'alt_name': 'alt_name',
    'access': 'access',
    'width': 'width',
    'surface': 'surface',
    'ref': 'ref',
    'oneway': 'oneway',
    'old_name_1': 'old_name_1',
    'old_name': 'old_name',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'maxspeed': 'maxspeed',
    'lit': 'lit',
    'lanes': 'lanes',
    'highway': 'highway',
    'geom': 'MULTILINESTRING',
}
bicycle_shp = Path(__file__).resolve().parent / 'shape' / 'bicycle.shp'
def bicycle_data(verbose=True):
    lm = LayerMapping(models.Bicycle, bicycle_shp, bicycle_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Bridge model
bridge_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'bridge': 'bridge',
    'usage': 'usage',
    'segregated': 'segregated',
    'railway': 'railway',
    'crossing_i': 'crossing_i',
    'man_made': 'man_made',
    'width': 'width',
    'wikipedia': 'wikipedia',
    'wikidata': 'wikidata',
    'start_date': 'start_date',
    'roller_coa': 'roller_coa',
    'operator': 'operator',
    'manufactur': 'manufactur',
    'attraction': 'attraction',
    'turn_lanes': 'turn_lanes',
    'covered': 'covered',
    'crossing': 'crossing',
    'opening_da': 'opening_da',
    'indoor': 'indoor',
    'barrier': 'barrier',
    'height': 'height',
    'footway': 'footway',
    'tracktype': 'tracktype',
    'abandoned_field': 'abandoned_',
    'maxspeed_t': 'maxspeed_t',
    'maxspeed_f': 'maxspeed_f',
    'incline': 'incline',
    'horse': 'horse',
    'bicycle': 'bicycle',
    'junction_r': 'junction_r',
    'service': 'service',
    'causeway': 'causeway',
    'noname': 'noname',
    'motor_vehi': 'motor_vehi',
    'check_date': 'check_date',
    'level': 'level',
    'architect_field': 'architect_',
    'architec_1': 'architec_1',
    'architect': 'architect',
    'constructi': 'constructi',
    'maxheight': 'maxheight',
    'ref_ar': 'ref_ar',
    'maxspeed_h': 'maxspeed_h',
    'loc_name': 'loc_name',
    'alt_name': 'alt_name',
    'access': 'access',
    'junction': 'junction',
    'old_name_2': 'old_name_2',
    'old_name_1': 'old_name_1',
    'old_name_3': 'old_name_3',
    'lit': 'lit',
    'old_name': 'old_name',
    'foot': 'foot',
    'destinatio': 'destinatio',
    'destinat_1': 'destinat_1',
    'destinat_2': 'destinat_2',
    'destinat_3': 'destinat_3',
    'surface': 'surface',
    'ref': 'ref',
    'oneway': 'oneway',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'maxspeed': 'maxspeed',
    'layer': 'layer',
    'lanes': 'lanes',
    'highway': 'highway',
    'geom': 'MULTILINESTRING',
}
bridge_shp = Path(__file__).resolve().parent / 'shape' / 'bridge.shp'
def bridge_data(verbose=True):
    lm = LayerMapping(models.Bridge, bridge_shp, bridge_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Building model
building_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'building': 'building',
    'vending': 'vending',
    'natural': 'natural',
    'tourism': 'tourism',
    'government': 'government',
    'foot': 'foot',
    'descriptio': 'descriptio',
    'addr_stree': 'addr_stree',
    'addr_city_field': 'addr_city_',
    'denominati': 'denominati',
    'religion': 'religion',
    'internet_a': 'internet_a',
    'emergency': 'emergency',
    'railway': 'railway',
    'wikipedia': 'wikipedia',
    'wikidata': 'wikidata',
    'website': 'website',
    'phone': 'phone',
    'building_l': 'building_l',
    'addr_postc': 'addr_postc',
    'office': 'office',
    'highway': 'highway',
    'level': 'level',
    'layer': 'layer',
    'name_ur': 'name_ur',
    'name_pnb': 'name_pnb',
    'name_kk_ar': 'name_kk-Ar',
    'name_fa': 'name_fa',
    'name_de': 'name_de',
    'name_ru': 'name_ru',
    'wheelchair': 'wheelchair',
    'supervised': 'supervised',
    'parking': 'parking',
    'fee': 'fee',
    'access': 'access',
    'addr_house': 'addr_house',
    'operator': 'operator',
    'aeroway': 'aeroway',
    'addr_str_1': 'addr_str_1',
    'opening_ho': 'opening_ho',
    'healthcare': 'healthcare',
    'amenity': 'amenity',
    'entrance': 'entrance',
    'shop': 'shop',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'addr_hou_1': 'addr_hou_1',
    'addr_count': 'addr_count',
    'addr_city': 'addr_city',
    'barrier': 'barrier',
    'sport': 'sport',
    'leisure': 'leisure',
    'covered': 'covered',
    'geom': 'MULTIPOINT',
}
building_shp = Path(__file__).resolve().parent / 'shape' / 'building.shp'
def building_data(verbose=True):
    lm = LayerMapping(models.Building, building_shp, building_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Cycleway model
cycleway_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'cycleway': 'cycleway',
    'surface': 'surface',
    'crossing_i': 'crossing_i',
    'bicycle': 'bicycle',
    'highway': 'highway',
    'foot': 'foot',
    'geom': 'MULTILINESTRING',
}
cycleway_shp = Path(__file__).resolve().parent / 'shape' / 'cycleway.shp'
def cycleway_data(verbose=True):
    lm = LayerMapping(models.Cycleway, cycleway_shp, cycleway_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for embassy model
embassy_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'embassy': 'embassy',
    'name_sl': 'name_sl',
    'name_et': 'name_et',
    'name_lt': 'name_lt',
    'name_lv': 'name_lv',
    'name_ro': 'name_ro',
    'descriptio': 'descriptio',
    'contact_fa': 'contact_fa',
    'name_mi': 'name_mi',
    'alt_name_m': 'alt_name_m',
    'official_n': 'official_n',
    'official_1': 'official_1',
    'official_2': 'official_2',
    'official_3': 'official_3',
    'official_4': 'official_4',
    'official_5': 'official_5',
    'official_6': 'official_6',
    'official_7': 'official_7',
    'name_tr': 'name_tr',
    'name_sq': 'name_sq',
    'name_pt': 'name_pt',
    'name_pl': 'name_pl',
    'name_nl': 'name_nl',
    'name_lo': 'name_lo',
    'name_lb': 'name_lb',
    'name_ja': 'name_ja',
    'name_it': 'name_it',
    'name_el': 'name_el',
    'name_da': 'name_da',
    'name_cs': 'name_cs',
    'alt_name_n': 'alt_name_n',
    'alt_name_f': 'alt_name_f',
    'addr_unit': 'addr_unit',
    'addr_count': 'addr_count',
    'name_uk': 'name_uk',
    'alt_name_u': 'alt_name_u',
    'alt_name': 'alt_name',
    'name_zh': 'name_zh',
    'diplomatic': 'diplomatic',
    'diplomat_1': 'diplomat_1',
    'diplomat_2': 'diplomat_2',
    'addr_postc': 'addr_postc',
    'name_hi': 'name_hi',
    'addr_full': 'addr_full',
    'name_ru': 'name_ru',
    'addr_distr': 'addr_distr',
    'fax': 'fax',
    'opening_ho': 'opening_ho',
    'name_ur': 'name_ur',
    'addr_postb': 'addr_postb',
    'addr_house': 'addr_house',
    'addr_city_field': 'addr_city_',
    'name_fr': 'name_fr',
    'name_es': 'name_es',
    'contact_we': 'contact_we',
    'contact_ph': 'contact_ph',
    'contact_1': 'contact__1',
    'contact_em': 'contact_em',
    'addr_stree': 'addr_stree',
    'addr_full_field': 'addr_full_',
    'website': 'website',
    'name_de': 'name_de',
    'level': 'level',
    'alt_name_e': 'alt_name_e',
    'alt_name_d': 'alt_name_d',
    'wikipedia': 'wikipedia',
    'wikidata': 'wikidata',
    'phone': 'phone',
    'official_8': 'official_8',
    'official_9': 'official_9',
    'email': 'email',
    'addr_city': 'addr_city',
    'target': 'target',
    'name_ar': 'name_ar',
    'office': 'office',
    'name_en': 'name_en',
    'name': 'name',
    'diplomat_3': 'diplomat_3',
    'country': 'country',
    'geom': 'MULTIPOINT',
}
embassy_shp = Path(__file__).resolve().parent / 'shape' / 'embassy.shp'
def embassy_data(verbose=True):
    lm = LayerMapping(models.Embassy, embassy_shp, embassy_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Emergency model
emergency_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'emergency': 'emergency',
    'addr_city': 'addr_city',
    'type': 'type',
    'name_en': 'name_en',
    'name': 'name',
    'healthcare': 'healthcare',
    'building_l': 'building_l',
    'building': 'building',
    'amenity': 'amenity',
    'geom': 'MULTIPOLYGON',
}
emergency_shp = Path(__file__).resolve().parent / 'shape' / 'emergency.shp'
def emergency_data(verbose=True):
    lm = LayerMapping(models.Emergency, emergency_shp, emergency_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Golf model
golf_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'golf': 'golf',
    'ref': 'ref',
    'leisure': 'leisure',
    'landuse': 'landuse',
    'surface': 'surface',
    'sport': 'sport',
    'type': 'type',
    'natural': 'natural',
    'name_en': 'name_en',
    'name': 'name',
    'geom': 'MULTIPOLYGON',
}
golf_shp = Path(__file__).resolve().parent / 'shape' / 'golf.shp'
def golf_data(verbose=True):
    lm = LayerMapping(models.Golf, golf_shp, golf_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Government model
government_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'government': 'government',
    'wikipedia_field': 'wikipedia_',
    'website': 'website',
    'alt_name': 'alt_name',
    'operator': 'operator',
    'height': 'height',
    'building_m': 'building_m',
    'addr_city_field': 'addr_city_',
    'addr_city': 'addr_city',
    'building_l': 'building_l',
    'office': 'office',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'building': 'building',
    'geom': 'MULTIPOLYGON',
}
government_shp = Path(__file__).resolve().parent / 'shape' / 'government.shp'
def government_data(verbose=True):
    lm = LayerMapping(models.Government, government_shp, government_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Highway model
highway_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'highway': 'highway',
    'name_hi': 'name_hi',
    'name_he': 'name_he',
    'bus': 'bus',
    'destinatio': 'destinatio',
    'leisure': 'leisure',
    'building_l': 'building_l',
    'node': 'node',
    'cycleway': 'cycleway',
    'cycleway_r': 'cycleway_r',
    'crossing_i': 'crossing_i',
    'access_con': 'access_con',
    'traffic_ca': 'traffic_ca',
    'man_made': 'man_made',
    'name_en1': 'name_en1',
    'non': 'non',
    'motorroad': 'motorroad',
    'hide': 'hide',
    'conveying': 'conveying',
    'indoor': 'indoor',
    'barrier': 'barrier',
    'handrail': 'handrail',
    'smoothness': 'smoothness',
    'vehicle': 'vehicle',
    'height': 'height',
    'abandoned': 'abandoned',
    'wheelchair': 'wheelchair',
    'waterway': 'waterway',
    'crossing': 'crossing',
    'tree_lined': 'tree_lined',
    'tracktype': 'tracktype',
    'lanes_forw': 'lanes_forw',
    'lanes_back': 'lanes_back',
    'embankment': 'embankment',
    'abandoned_field': 'abandoned_',
    'maxspeed_f': 'maxspeed_f',
    'power': 'power',
    'roundabout': 'roundabout',
    'disused': 'disused',
    'destinat_1': 'destinat_1',
    'destinat_2': 'destinat_2',
    'footway': 'footway',
    'segregated': 'segregated',
    'golf_cart': 'golf_cart',
    'sport': 'sport',
    'causeway': 'causeway',
    'alt_name_a': 'alt_name_a',
    'maxspeed_t': 'maxspeed_t',
    'check_date': 'check_date',
    'trail_visi': 'trail_visi',
    'turn_lanes': 'turn_lanes',
    'destinat_3': 'destinat_3',
    'descriptio': 'descriptio',
    'level': 'level',
    'architect_field': 'architect_',
    'architec_1': 'architec_1',
    'architect': 'architect',
    'covered': 'covered',
    'horse': 'horse',
    'incline': 'incline',
    'cutting': 'cutting',
    'ref_ar': 'ref_ar',
    'operator': 'operator',
    'width': 'width',
    'bicycle': 'bicycle',
    'opening_da': 'opening_da',
    'constructi': 'constructi',
    'old_name_a': 'old_name_a',
    'noname': 'noname',
    'maxspeed_a': 'maxspeed_a',
    'old_name_2': 'old_name_2',
    'is_in': 'is_in',
    'old_name_1': 'old_name_1',
    'old_name_e': 'old_name_e',
    'maxspeed_h': 'maxspeed_h',
    'tunnel': 'tunnel',
    'sidewalk': 'sidewalk',
    'name_de': 'name_de',
    'alt_name_e': 'alt_name_e',
    'old_name_3': 'old_name_3',
    'hgv': 'hgv',
    'motor_vehi': 'motor_vehi',
    'access': 'access',
    'source_nam': 'source_nam',
    'destinat_4': 'destinat_4',
    'junction_r': 'junction_r',
    'destinat_5': 'destinat_5',
    'destinat_6': 'destinat_6',
    'destinat_7': 'destinat_7',
    'destinat_8': 'destinat_8',
    'maxheight': 'maxheight',
    'layer': 'layer',
    'bridge': 'bridge',
    'loc_name': 'loc_name',
    'alt_name': 'alt_name',
    'lit': 'lit',
    'service': 'service',
    'junction': 'junction',
    'old_name_4': 'old_name_4',
    'busway_rig': 'busway_rig',
    'ref': 'ref',
    'old_name': 'old_name',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'lanes': 'lanes',
    'foot': 'foot',
    'surface': 'surface',
    'oneway': 'oneway',
    'maxspeed': 'maxspeed',
    'geom': 'MULTILINESTRING',
}
highway_shp = Path(__file__).resolve().parent / 'shape' / 'highway.shp'
def highway_data(verbose=True):
    lm = LayerMapping(models.Highway, highway_shp, highway_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Industrial model
industrial_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'industrial': 'industrial',
    'wikipedia': 'wikipedia',
    'wikidata': 'wikidata',
    'website': 'website',
    'name': 'name',
    'landuse': 'landuse',
    'descriptio': 'descriptio',
    'geom': 'MULTIPOLYGON',
}
industrial_shp = Path(__file__).resolve().parent / 'shape' / 'industrial.shp'
def industrial_data(verbose=True):
    lm = LayerMapping(models.Industrial, industrial_shp, industrial_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Landuse model
landuse_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'landuse': 'landuse',
    'military_s': 'military_s',
    'opening_da': 'opening_da',
    'check_date': 'check_date',
    'residentia': 'residentia',
    'industrial': 'industrial',
    'name_fr': 'name_fr',
    'name_en1': 'name_en1',
    'military': 'military',
    'alt_name_f': 'alt_name_f',
    'alt_name_e': 'alt_name_e',
    'addr_house': 'addr_house',
    'tourism': 'tourism',
    'name_1': 'name_1',
    'phone': 'phone',
    'descriptio': 'descriptio',
    'highway': 'highway',
    'constructi': 'constructi',
    'golf': 'golf',
    'boundary': 'boundary',
    'admin_leve': 'admin_leve',
    'addr_subur': 'addr_subur',
    'addr_sub_1': 'addr_sub_1',
    'addr_state': 'addr_state',
    'addr_sta_1': 'addr_sta_1',
    'addr_provi': 'addr_provi',
    'addr_pro_1': 'addr_pro_1',
    'addr_place': 'addr_place',
    'addr_pla_1': 'addr_pla_1',
    'addr_neigh': 'addr_neigh',
    'addr_count': 'addr_count',
    'addr_city_field': 'addr_city_',
    'ways_in_ar': 'ways_in_ar',
    'denominati': 'denominati',
    'aquacultur': 'aquacultur',
    'addr_hou_1': 'addr_hou_1',
    'addr_stree': 'addr_stree',
    'waterway': 'waterway',
    'ref': 'ref',
    'name_ur': 'name_ur',
    'icao': 'icao',
    'iata': 'iata',
    'aeroway': 'aeroway',
    'access': 'access',
    'website': 'website',
    'addr_cit_1': 'addr_cit_1',
    'religion': 'religion',
    'amenity': 'amenity',
    'building_l': 'building_l',
    'sport': 'sport',
    'golf_pract': 'golf_pract',
    'place': 'place',
    'alt_name': 'alt_name',
    'natural': 'natural',
    'office': 'office',
    'leisure': 'leisure',
    'building': 'building',
    'surface': 'surface',
    'leaf_cycle': 'leaf_cycle',
    'leaf_type': 'leaf_type',
    'wood': 'wood',
    'barrier': 'barrier',
    'addr_city': 'addr_city',
    'wikipedia_field': 'wikipedia_',
    'wikipedia': 'wikipedia',
    'wikidata': 'wikidata',
    'name_fa': 'name_fa',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'type': 'type',
    'geom': 'MULTIPOLYGON',
}
landuse_shp = Path(__file__).resolve().parent / 'shape' / 'landuse.shp'
def landuse_data(verbose=True):
    lm = LayerMapping(models.Landuse, landuse_shp, landuse_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)



# Auto-generated `LayerMapping` dictionary for Names model
names_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'name': 'name',
    'noname': 'noname',
    'lanes': 'lanes',
    'diet_pesce': 'diet_pesce',
    'diet_lacto': 'diet_lacto',
    'diet_glute': 'diet_glute',
    'payment_te': 'payment_te',
    'payment_ma': 'payment_ma',
    'payment_am': 'payment_am',
    'service_bi': 'service_bi',
    'service_1': 'service__1',
    'service_2': 'service__2',
    'service_3': 'service__3',
    'diet_organ': 'diet_organ',
    'diet_meat': 'diet_meat',
    'name_nb': 'name_nb',
    'toll_psv': 'toll_psv',
    'toll_motor': 'toll_motor',
    'toll_mot_1': 'toll_mot_1',
    'toll': 'toll',
    'fee_amount': 'fee_amount',
    'camera_mou': 'camera_mou',
    'diet_koshe': 'diet_koshe',
    'diet_halal': 'diet_halal',
    'holding_po': 'holding_po',
    'contact_vk': 'contact_vk',
    'vending': 'vending',
    'bar': 'bar',
    'start_date': 'start_date',
    'manufactur': 'manufactur',
    'camera_typ': 'camera_typ',
    'name_en2': 'name_en2',
    'addr_neigh': 'addr_neigh',
    'surveillan': 'surveillan',
    'surveill_1': 'surveill_1',
    'surveill_2': 'surveill_2',
    'lamp_type': 'lamp_type',
    'product': 'product',
    'residentia': 'residentia',
    'reservatio': 'reservatio',
    'guest_hous': 'guest_hous',
    'alt_name_m': 'alt_name_m',
    'mobile_pho': 'mobile_pho',
    'official_n': 'official_n',
    'official_1': 'official_1',
    'official_2': 'official_2',
    'official_3': 'official_3',
    'official_4': 'official_4',
    'official_5': 'official_5',
    'official_6': 'official_6',
    'alt_name_n': 'alt_name_n',
    'alt_name_f': 'alt_name_f',
    'alt_name_u': 'alt_name_u',
    'url': 'url',
    'shelter_ty': 'shelter_ty',
    'toilets_ac': 'toilets_ac',
    'toilets': 'toilets',
    'toilets_wh': 'toilets_wh',
    'waterway': 'waterway',
    'attraction': 'attraction',
    'government': 'government',
    'payment_vi': 'payment_vi',
    'payment_ca': 'payment_ca',
    'internet_a': 'internet_a',
    'brewery': 'brewery',
    'operator_t': 'operator_t',
    'healthcare': 'healthcare',
    'monitoring': 'monitoring',
    'facebook': 'facebook',
    'cargo': 'cargo',
    'brand_wiki': 'brand_wiki',
    'club': 'club',
    'clothes': 'clothes',
    'short_name': 'short_name',
    'brand_pnb': 'brand_pnb',
    'brand_ks': 'brand_ks',
    'brand_azb': 'brand_azb',
    'beauty': 'beauty',
    'diplomatic': 'diplomatic',
    'diplomat_1': 'diplomat_1',
    'diplomat_2': 'diplomat_2',
    'crossing_i': 'crossing_i',
    'name_1': 'name_1',
    'disused_sh': 'disused_sh',
    'crossing_r': 'crossing_r',
    'diet_vegan': 'diet_vegan',
    'trade': 'trade',
    'phone_1': 'phone_1',
    'phone_mobi': 'phone_mobi',
    'addr_ref': 'addr_ref',
    'indoor': 'indoor',
    'contact_yo': 'contact_yo',
    'contact_li': 'contact_li',
    'disused_am': 'disused_am',
    'addr_unit': 'addr_unit',
    'descriptio': 'descriptio',
    'artwork_ty': 'artwork_ty',
    'services': 'services',
    'swimming_p': 'swimming_p',
    'addr_full': 'addr_full',
    'bench': 'bench',
    'denominati': 'denominati',
    'image': 'image',
    'network': 'network',
    'payment_no': 'payment_no',
    'payment_el': 'payment_el',
    'payment_cr': 'payment_cr',
    'payment_co': 'payment_co',
    'second_han': 'second_han',
    'surface': 'surface',
    'lit': 'lit',
    'organic': 'organic',
    'male': 'male',
    'place_of_w': 'place_of_w',
    'female': 'female',
    'railway': 'railway',
    'monorail': 'monorail',
    'name_en1': 'name_en1',
    'recycling_field': 'recycling_',
    'recyclin_1': 'recyclin_1',
    'religion': 'religion',
    'building_l': 'building_l',
    'motorcycle': 'motorcycle',
    'motorcar': 'motorcar',
    'addr_place': 'addr_place',
    'craft': 'craft',
    'informatio': 'informatio',
    'boundary': 'boundary',
    'addr_subur': 'addr_subur',
    'addr_sub_1': 'addr_sub_1',
    'addr_state': 'addr_state',
    'addr_sta_1': 'addr_sta_1',
    'addr_provi': 'addr_provi',
    'addr_pro_1': 'addr_pro_1',
    'addr_pla_1': 'addr_pla_1',
    'addr_pla_2': 'addr_pla_2',
    'addr_city_field': 'addr_city_',
    'layer': 'layer',
    'wheelchair': 'wheelchair',
    'name_kk_ar': 'name_kk-Ar',
    'diet_veget': 'diet_veget',
    'power': 'power',
    'direction': 'direction',
    'supervised': 'supervised',
    'parking': 'parking',
    'addr_postb': 'addr_postb',
    'addr_full_field': 'addr_full_',
    'seamark_ty': 'seamark_ty',
    'seamark_ha': 'seamark_ha',
    'self_servi': 'self_servi',
    'alt_name_e': 'alt_name_e',
    'alt_name_d': 'alt_name_d',
    'hypermarke': 'hypermarke',
    'shelter': 'shelter',
    'dispensing': 'dispensing',
    'ferry': 'ferry',
    'horse': 'horse',
    'foot': 'foot',
    'door': 'door',
    'bicycle': 'bicycle',
    'delivery': 'delivery',
    'long_name_field': 'long_name_',
    'long_name': 'long_name',
    'addr_stree': 'addr_stree',
    'addr_house': 'addr_house',
    'addr_hou_1': 'addr_hou_1',
    'addr_floor': 'addr_floor',
    'traffic_ca': 'traffic_ca',
    'tower_type': 'tower_type',
    'locked': 'locked',
    'type': 'type',
    'destinatio': 'destinatio',
    'outdoor_se': 'outdoor_se',
    'stars': 'stars',
    'rooms': 'rooms',
    'mapillary': 'mapillary',
    'internet_1': 'internet_1',
    'air_condit': 'air_condit',
    'location': 'location',
    'public_tra': 'public_tra',
    'bus': 'bus',
    'payment_1': 'payment__1',
    'payment_2': 'payment__2',
    'payment_de': 'payment_de',
    'payment_3': 'payment__3',
    'payment_4': 'payment__4',
    'opening_ho': 'opening_ho',
    'min_age': 'min_age',
    'currency_a': 'currency_A',
    'fuel_diese': 'fuel_diese',
    'designatio': 'designatio',
    'aeroway': 'aeroway',
    'fee': 'fee',
    'wifi': 'wifi',
    'capacity': 'capacity',
    'entrance': 'entrance',
    'addr_postc': 'addr_postc',
    'official_7': 'official_7',
    'official_8': 'official_8',
    'contact_fa': 'contact_fa',
    'fax': 'fax',
    'email': 'email',
    'addr_distr': 'addr_distr',
    'smoking': 'smoking',
    'building': 'building',
    'is_in': 'is_in',
    'target': 'target',
    'language_a': 'language_a',
    'addr_hou_2': 'addr_hou_2',
    'drive_thro': 'drive_thro',
    'level': 'level',
    'traffic_si': 'traffic_si',
    'traffic_1': 'traffic__1',
    'man_made': 'man_made',
    'height': 'height',
    'tourism': 'tourism',
    'historic': 'historic',
    'embassy': 'embassy',
    'diplomat_3': 'diplomat_3',
    'country': 'country',
    'phone': 'phone',
    'internet_2': 'internet_2',
    'takeaway': 'takeaway',
    'brand_ur': 'brand_ur',
    'brand_pa': 'brand_pa',
    'brand_fa': 'brand_fa',
    'addr_str_1': 'addr_str_1',
    'contact_we': 'contact_we',
    'contact_tw': 'contact_tw',
    'contact_ph': 'contact_ph',
    'contact_in': 'contact_in',
    'contact_1': 'contact__1',
    'contact_em': 'contact_em',
    'addr_cit_1': 'addr_cit_1',
    'healthca_1': 'healthca_1',
    'emergency': 'emergency',
    'opening_1': 'opening__1',
    'dress_code': 'dress_code',
    'atm': 'atm',
    'official_9': 'official_9',
    'website': 'website',
    'brand_wi_1': 'brand_wi_1',
    'brand_wi_2': 'brand_wi_2',
    'brand_en': 'brand_en',
    'brand_ar': 'brand_ar',
    'brand': 'brand',
    'landuse': 'landuse',
    'addr_str_2': 'addr_str_2',
    'addr_hou_3': 'addr_hou_3',
    'addr_count': 'addr_count',
    'addr_city': 'addr_city',
    'service': 'service',
    'operator': 'operator',
    'cuisine': 'cuisine',
    'ele': 'ele',
    'geom': 'MULTIPOINT',
}
name_shp = Path(__file__).resolve().parent / 'shape' / 'name.shp'
def name_data(verbose=True):
    lm = LayerMapping(models.Names, name_shp, names_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


# Auto-generated `LayerMapping` dictionary for Natural model
natural_mapping = {
    'full_id': 'full_id',
    'osm_id': 'osm_id',
    'osm_type': 'osm_type',
    'natural': 'natural',
    'intermitte': 'intermitte',
    'golf_pract': 'golf_pract',
    'layer': 'layer',
    'old_name': 'old_name',
    'descriptio': 'descriptio',
    'name_1': 'name_1',
    'managed': 'managed',
    'lit': 'lit',
    'fee': 'fee',
    'icao': 'icao',
    'iata': 'iata',
    'aeroway': 'aeroway',
    'addr_city_field': 'addr_city_',
    'addr_city': 'addr_city',
    'historic': 'historic',
    'barrier': 'barrier',
    'access': 'access',
    'addr_stree': 'addr_stree',
    'addr_house': 'addr_house',
    'building': 'building',
    'tourism': 'tourism',
    'alt_name_2': 'alt_name_2',
    'loc_name': 'loc_name',
    'industrial': 'industrial',
    'leisure': 'leisure',
    'man_made': 'man_made',
    'long_name_field': 'long_name_',
    'short_name': 'short_name',
    'ref': 'ref',
    'alt_name_c': 'alt_name_c',
    'website': 'website',
    'source_nam': 'source_nam',
    'gns_id': 'GNS_id',
    'landuse': 'landuse',
    'surface': 'surface',
    'wikipedia_field': 'wikipedia_',
    'alt_name_a': 'alt_name_a',
    'name_ar1': 'name_ar1',
    'int_name': 'int_name',
    'place': 'place',
    'name_en1': 'name_en1',
    'wikipedia': 'wikipedia',
    'wikidata': 'wikidata',
    'sqkm': 'sqkm',
    'name_zh_ha': 'name_zh-Ha',
    'name_zh_1': 'name_zh-_1',
    'name_zh': 'name_zh',
    'name_vi': 'name_vi',
    'name_ur': 'name_ur',
    'name_uk': 'name_uk',
    'name_tr': 'name_tr',
    'name_th': 'name_th',
    'name_sw': 'name_sw',
    'name_sl': 'name_sl',
    'name_sk': 'name_sk',
    'name_ru': 'name_ru',
    'name_pt': 'name_pt',
    'name_ps': 'name_ps',
    'name_pnb': 'name_pnb',
    'name_pl': 'name_pl',
    'name_no': 'name_no',
    'name_nl': 'name_nl',
    'name_mzn': 'name_mzn',
    'name_ms': 'name_ms',
    'name_lt': 'name_lt',
    'name_la': 'name_la',
    'name_ku': 'name_ku',
    'name_ko': 'name_ko',
    'name_kk': 'name_kk',
    'name_ka': 'name_ka',
    'name_ja': 'name_ja',
    'name_it': 'name_it',
    'name_is': 'name_is',
    'name_io': 'name_io',
    'name_ia': 'name_ia',
    'name_hy': 'name_hy',
    'name_hu': 'name_hu',
    'name_hr': 'name_hr',
    'name_hi': 'name_hi',
    'name_he': 'name_he',
    'name_glk': 'name_glk',
    'name_fr': 'name_fr',
    'name_fi': 'name_fi',
    'name_fa': 'name_fa',
    'name_et': 'name_et',
    'name_es': 'name_es',
    'name_eo': 'name_eo',
    'name_el': 'name_el',
    'name_de': 'name_de',
    'name_cs': 'name_cs',
    'name_ckb': 'name_ckb',
    'name_ca': 'name_ca',
    'name_bs': 'name_bs',
    'name_bn': 'name_bn',
    'name_azb': 'name_azb',
    'name_az': 'name_az',
    'name_arz': 'name_arz',
    'name_arc': 'name_arc',
    'name_ang': 'name_ang',
    'gns_uni': 'gns_uni',
    'gns_dsg': 'gns_dsg',
    'alt_name_z': 'alt_name_z',
    'alt_name_y': 'alt_name_y',
    'alt_name_v': 'alt_name_v',
    'alt_name_u': 'alt_name_u',
    'alt_name_t': 'alt_name_t',
    'alt_name_1': 'alt_name_1',
    'alt_name_s': 'alt_name_s',
    'alt_name_r': 'alt_name_r',
    'alt_name_p': 'alt_name_p',
    'alt_name_3': 'alt_name_3',
    'alt_name_n': 'alt_name_n',
    'alt_name_l': 'alt_name_l',
    'alt_name_k': 'alt_name_k',
    'alt_name_4': 'alt_name_4',
    'alt_name_j': 'alt_name_j',
    'alt_name_i': 'alt_name_i',
    'alt_name_h': 'alt_name_h',
    'alt_name_5': 'alt_name_5',
    'alt_name_6': 'alt_name_6',
    'alt_name_7': 'alt_name_7',
    'alt_name_f': 'alt_name_f',
    'alt_name_8': 'alt_name_8',
    'alt_name_e': 'alt_name_e',
    'alt_name_9': 'alt_name_9',
    'alt_name10': 'alt_name10',
    'alt_name11': 'alt_name11',
    'alt_name_d': 'alt_name_d',
    'alt_name12': 'alt_name12',
    'alt_name13': 'alt_name13',
    'alt_name_b': 'alt_name_b',
    'alt_name14': 'alt_name14',
    'alt_name15': 'alt_name15',
    'alt_name': 'alt_name',
    'water': 'water',
    'golf': 'golf',
    'name_en': 'name_en',
    'name_ar': 'name_ar',
    'name': 'name',
    'wetland': 'wetland',
    'type': 'type',
    'geom': 'MULTIPOLYGON',
}
natural_shp = Path(__file__).resolve().parent / 'shape' / 'natural.shp'
def natural_data(verbose=True):
    lm = LayerMapping(models.Natural, natural_shp, natural_mapping, transform=False, encoding='iso-8859-1')
    lm.save(strict=True, verbose=verbose)


